在 Linux 系统编程中，有许多技术点和概念需要掌握。以下是一些关键的技术点:

1. 文件操作
文件描述符:使用 open、read、write、close 等系统调用进行文件操作。
文件权限:使用 chmod、chown 等命令和系统调用设置文件权限。
文件锁:使用 flock、fcntl 实现文件锁定。
2. 进程管理
进程创建:使用 fork 创建子进程。
进程终止:使用 exit、_exit 终止进程。
进程等待:使用 wait、waitpid 等等待子进程结束。
进程间通信(IPC):使用管道(pipe)、消息队列、共享内存、信号量等实现进程间通信。
3. 线程管理
线程创建:使用 pthread_create 创建线程。
线程同步:使用互斥锁(pthread_mutex)、条件变量(pthread_cond)、读写锁(pthread_rwlock)等实现线程同步。
线程终止:使用 pthread_exit 终止线程。
线程等待:使用 pthread_join 等待线程结束。
4. 信号处理
信号发送:使用 kill、raise 发送信号。
信号捕捉:使用 signal、sigaction 捕捉和处理信号。
信号屏蔽:使用 sigprocmask 屏蔽信号。
5. 定时器
定时器创建:使用 timer_create 创建定时器。
定时器设置:使用 timer_settime 设置定时器。
定时器删除:使用 timer_delete 删除定时器。
6. 网络编程
套接字编程:使用 socket、bind、listen、accept、connect、send、recv 等系统调用进行网络编程。
多路复用:使用 select、poll、epoll 实现多路复用。
7. 内存管理
动态内存分配:使用 malloc、calloc、realloc、free 进行动态内存分配和释放。
内存映射:使用 mmap、munmap 实现内存映射文件。
8. 设备驱动
字符设备:编写字符设备驱动程序，使用 open、read、write、ioctl 等操作字符设备。
块设备:编写块设备驱动程序，使用 request、make_request 等操作块设备。
9. 文件系统
文件系统类型:了解不同的文件系统类型，如 ext4、xfs、btrfs 等。
挂载和卸载:使用 mount、umount 挂载和卸载文件系统。
文件系统操作:使用 mkfs、fsck 等命令操作文件系统。
10. 调试和性能分析
调试工具:使用 gdb、strace、ltrace 等工具进行调试。
性能分析工具:使用 perf、valgrind、gprof 等工具进行性能分析和内存泄漏检测。
这些技术点涵盖了 Linux 系统编程的主要方面，掌握这些技术点可以帮助你编写高效、可靠的 Linux 应用程序。



1、硬件相关
1.1 USB通信
1.2 串口通信
1.3 i2c通信
1.4 spi通信

2、系统相关
2.1 文件操作
2.2 网络socket通信
2.2.1 socket select
2.2.2 socket poll
2.2.3 socket epoll
2.3 系统时间time
2.4 系统日志
2.5 系统定时器timer
2.6 系统定时任务task
2.7 系统进程fork
2.8 系统线程thread
2.9.1 线程锁
2.9.2 线程同步
2.9.3 线程池
2.10 进程间通信
2.10.1  系统信号signal
2.10.2  系统管道pipe/有名fifo
2.10.3  系统消息队列message queue
2.10.4  系统共享内存shared memory
2.10.5  系统信号量semaphore



3、数据结构相关
3.1 链表--list
3.2 栈 --
3.3 队列
3.4 哈希表
3.5 树
3.6 图
3.7 矩阵
3.8 字符串
3.9 数组
3.10 集合
3.11 映射
3.12 堆
3.13 堆栈
3.14 堆队列
3.15 堆栈队列
3.16 堆栈队列堆

3、算法相关
3.1 哈希算法
3.2 加密算法
3.3 解密算法
3.4 压缩算法
3.5 解压算法
3.6 图像处理算法
3.7 音频处理算法
3.8 视频处理算法
3.9 语音处理算法
3.10 机器学习算法

4、协议相关
4.1 http协议
4.2 https协议
4.3 ftp协议
4.4 ssh协议
4.5 telnet协议
4.6 smtp协议
4.7 pop3协议
4.8 imap协议
4.9 snmp协议
4.10 dns协议
4.11 dhcp协议
4.12 tftp协议
4.13 rtp协议
4.14 rtsp协议
4.15 rtmp协议
4.16 srt协议
4.17 udp协议
4.18 tcp协议
4.19 mqtt协议