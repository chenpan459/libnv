
1. **select**:
   - 'select'是最早的I/O多路复用接口之一.
   - 它使用一个位掩码(bitmask)数组来跟踪文件描述符的状态.
   - 'select'有一个最大文件描述符数量的限制(通常是1024),这可以通过修改宏'FD_SETSIZE'来增加,但会增加内存使用量.
   - 'select'在每次调用时都需要重新传递文件描述符集合,并且需要在用户空间和内核空间之间复制这些数据,这在大量文件描述符的情况下效率较低.
   - 'select'在文件描述符较少时效率尚可,但随着文件描述符数量的增加,性能会显著下降.

2. **poll**:
   - 'poll'是'select'的一个改进版本,没有最大文件描述符数量的限制.
   - 它使用'pollfd'结构体来跟踪文件描述符的状态,而不是位掩码.
   - 'poll'不需要在每次调用时复制整个文件描述符集合,因此对于大量文件描述符的情况,它的效率更高.
   - 'poll'在处理大量文件描述符时比'select'更高效,但在大量并发连接时仍然存在性能问题.

3. **epoll**(仅在Linux上可用):
   - 'epoll'是Linux特有的、高效的I/O多路复用接口.
   - 'epoll'使用一个文件描述符来管理所有的文件描述符,减少了资源消耗.
   - 'epoll'不需要在每次调用时复制文件描述符集合,它只需要传递必要的事件.
   - 'epoll'使用“事件驱动”的方式,只有当文件描述符的状态发生变化时,才会通知应用程序,这减少了不必要的轮询.
   - 'epoll'支持水平触发(LT)和边缘触发(ET)两种模式,边缘触发模式可以减少虚假唤醒和不必要的通知.
   - 'epoll'在处理大量并发连接时性能优越,特别适合高并发服务器.

总结来说,'epoll'在性能上优于'poll'和'select',特别是在高并发场景下.'poll'在处理大量文件描述符时比'select'更高效,
但没有'epoll'高效.'select'由于其限制和性能问题,通常不推荐在高并发场景下使用.
